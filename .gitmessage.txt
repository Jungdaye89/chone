# <타입>: <변경 요약>
# 예: Feat: 기존 인증 방식 제거

# <본문 - 상세 설명>
# 무엇을 변경했는지 설명합니다.
# 예: 다크 모드를 활성화할 수 있는 토글 버튼을 추가했습니다.
#
# 변경한 이유나 배경을 설명합니다.
# 예: 사용자가 더 나은 접근성을 위해 저조도 환경에서도 편리하게 사용할 수 있도록
#     다크 모드 기능을 추가하였습니다.
# - UI 설정에서 라이트와 다크 테마를 전환할 수 있습니다.
# - 다크 테마는 기본적으로 환경 설정에 맞춰 자동 전환됩니다.

# <푸터 - 관련 정보>
# 예: Resolved #123

# ------------- 아래 내용을 참고하여 작성하세요 -------------

# <타입>
# Feat	새로운 기능 또는 사용자에게 새로운 동작을 제공하는 변경
# fix       : 운영 장애 수정
# docs    : 문서 수정
# style    : 코드 스타일 변경 (공백, 들여쓰기 등 비기능적 변경)
# refactor : 코드 리팩토링 (기능 변경 없이 개선)
# test      : 테스트 코드 추가 또는 수정
# chore   : 기타 변경사항 (빌드, 설정 파일 등)
# perf     : 성능 개선
# ci        : CI/CD 설정 및 스크립트 변경
fix
update	기능 수정(정책 변경에 따른 수정 등)
merge	기능 병합
docs	문서 수정
style	코드 포맷팅, 세미콜론 누락 등 (코드 변경 없음)
refactor	코드 리팩토링. 성능 개선
test	테스트 코드 추가, 테스트 리팩토링
chore	빌드 작업, ci, 패키지 매니저 설정 등
# <Breaking Change>
# Breaking Change가 있는 경우:
# - 타입 뒤에 느낌표(`!`)를 추가합니다.
# - 푸터에 'BREAKING CHANGE:'와 함께 상세 내용을 작성합니다.
# 예: feat!: 기존 인증 방식 제거
# 예: BREAKING CHANGE: 모든 인증 요청에서 JWT 토큰이 필수가 되었습니다.

# <스코프>
# 변경된 부분의 범위를 g작성합니다. (선택 사항)
# 예: auth, ui, api
# 여러 범위를 변경했다면 쉼표로 구분합니다. 예: `feat(auth, ui):`

# <변경 요약>
# 간결하고 명확하게 변경 사항을 한 줄로 설명합니다 (50자 이내).
# 끝에 마침표(.)를 금지합니다.
# 예: `feat: 다크 모드 추가` / `fix(auth): 로그인 오류 수정`

# <본문>
# 제목과 본문은 한 줄을 띄워 분리합니다.
# 본문에는 무엇을 변경했는지, 왜 변경했는지 작성합니다.
# 각 줄은 72자 이내로 작성하며, 부연 설명은 "-"로 구분합니다.

# <푸터>
# 본문과 푸터는 한 줄을 띄워 분리합니다.
# 관련 이슈 번호나 브레이킹 체인지를 작성합니다.
# 예: `Resolves: #123` / `BREAKING CHANGE: 이전 버전에서의 세션 인증 방식이 제거되었습니다.`
